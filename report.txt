Grammar

    0 $accept: statement_body $end

    1 $@1: %empty

    2 expression: $@1 orh_expression assign_expression

    3 $@2: %empty

    4 assign_expression: $@2 ASSIGN orh_expression assign_expression
    5                  | %empty

    6 $@3: %empty

    7 orh_expression: $@3 andh_expression or_expression

    8 $@4: %empty

    9 or_expression: $@4 OR andh_expression or_expression
   10              | %empty

   11 $@5: %empty

   12 andh_expression: $@5 eneh_expression and_expression

   13 $@6: %empty

   14 and_expression: $@6 AND eneh_expression and_expression
   15               | %empty

   16 $@7: %empty

   17 eneh_expression: $@7 lgh_expression ene_expression

   18 $@8: %empty

   19 ene_expression: $@8 EQ lgh_expression ene_expression

   20 $@9: %empty

   21 ene_expression: $@9 NE lgh_expression ene_expression
   22               | %empty

   23 $@10: %empty

   24 lgh_expression: $@10 pmh_expression lg_expression

   25 $@11: %empty

   26 lg_expression: $@11 GT pmh_expression lg_expression

   27 $@12: %empty

   28 lg_expression: $@12 GE pmh_expression lg_expression

   29 $@13: %empty

   30 lg_expression: $@13 LT pmh_expression lg_expression

   31 $@14: %empty

   32 lg_expression: $@14 LE pmh_expression lg_expression
   33              | %empty

   34 $@15: %empty

   35 pmh_expression: $@15 mtdh_expression pm_expression

   36 $@16: %empty

   37 pm_expression: $@16 PLUS mtdh_expression pm_expression

   38 $@17: %empty

   39 pm_expression: $@17 MINUS mtdh_expression pm_expression
   40              | %empty

   41 $@18: %empty

   42 mtdh_expression: $@18 powh_expression mtd_expression

   43 $@19: %empty

   44 mtd_expression: $@19 MOD powh_expression mtd_expression

   45 $@20: %empty

   46 mtd_expression: $@20 TIMES powh_expression mtd_expression

   47 $@21: %empty

   48 mtd_expression: $@21 DIVIDE powh_expression mtd_expression
   49               | %empty

   50 $@22: %empty

   51 powh_expression: $@22 noth_expression pow_expression

   52 $@23: %empty

   53 pow_expression: $@23 POW noth_expression pow_expression
   54               | %empty

   55 $@24: %empty

   56 noth_expression: $@24 pid_expression not_expression

   57 $@25: %empty

   58 not_expression: $@25 NOT pid_expression not_expression
   59               | %empty

   60 $@26: %empty

   61 pid_expression: $@26 LP expression RP

   62 $@27: %empty

   63 pid_expression: $@27 IDENTIFIER pointer_expression

   64 $@28: %empty

   65 pid_expression: $@28 CONSTANT

   66 $@29: %empty

   67 pointer_expression: $@29 POINTER IDENTIFIER pointer_expression
   68                   | %empty

   69 $@30: %empty

   70 type_defination: $@30 INT

   71 $@31: %empty

   72 type_defination: $@31 VOID

   73 $@32: %empty

   74 type_defination: $@32 STRUCT IDENTIFIER

   75 $@33: %empty

   76 $@34: %empty

   77 do_expression: $@33 DO $@34 statement_block WHILE LP expression RP SEMICOLON

   78 $@35: %empty

   79 $@36: %empty

   80 while_expression: $@35 WHILE LP expression RP $@36 statement_block

   81 $@37: %empty

   82 for_init_expression: $@37 declaration

   83 $@38: %empty

   84 for_init_expression: $@38 expression for_more_condition_expression
   85                    | %empty

   86 $@39: %empty

   87 for_condition_expression: $@39 expression for_more_condition_expression
   88                         | %empty

   89 $@40: %empty

   90 for_more_condition_expression: $@40 COMMA expression for_more_condition_expression
   91                              | %empty

   92 $@41: %empty

   93 for_action_expression: $@41 expression for_more_action_expression
   94                      | %empty

   95 $@42: %empty

   96 for_more_action_expression: $@42 COMMA expression
   97                           | %empty

   98 $@43: %empty

   99 $@44: %empty

  100 for_expression: $@43 FOR $@44 LP for_init_expression SEMICOLON for_condition_expression SEMICOLON for_action_expression RP statement_block

  101 $@45: %empty

  102 array_decorator: $@45 LSB expression RSB

  103 $@46: %empty

  104 high_level_array_decorator: $@46 array_decorator high_level_array_decorator
  105                           | %empty

  106 $@47: %empty

  107 high_level_pointer_decorator: $@47 TIMES high_level_pointer_decorator
  108                             | %empty

  109 $@48: %empty

  110 address_decorator: $@48 ADDRESS
  111                  | %empty

  112 $@49: %empty

  113 decorated_identifier: $@49 address_decorator high_level_pointer_decorator IDENTIFIER high_level_array_decorator

  114 $@50: %empty

  115 statement: $@50 expression SEMICOLON

  116 $@51: %empty

  117 statement: $@51 for_expression

  118 $@52: %empty

  119 statement: $@52 do_expression

  120 $@53: %empty

  121 statement: $@53 while_expression

  122 $@54: %empty

  123 statement: $@54 condition_expression

  124 $@55: %empty

  125 statement: $@55 declaration SEMICOLON

  126 $@56: %empty

  127 statement: $@56 statement_block

  128 $@57: %empty

  129 statement: $@57 BREAK SEMICOLON

  130 $@58: %empty

  131 statement: $@58 CONTINUE SEMICOLON

  132 $@59: %empty

  133 statement: $@59 RETURN expression SEMICOLON

  134 $@60: %empty

  135 statement: $@60 SEMICOLON

  136 $@61: %empty

  137 statement: $@61 PRINT LP print_content RP SEMICOLON

  138 $@62: %empty

  139 statement: $@62 INPUT LP expression RP SEMICOLON

  140 $@63: %empty

  141 print_content: $@63 expression

  142 $@64: %empty

  143 print_content: $@64 STRING_C

  144 $@65: %empty

  145 statement_block: $@65 LBP statement_body RBP

  146 $@66: %empty

  147 statement_body: $@66 statement statement_body
  148               | %empty

  149 $@67: %empty

  150 $@68: %empty

  151 function_declaration: $@67 LP function_argument_list RP $@68 statement_block

  152 $@69: %empty

  153 argument_declaration: $@69 declaration_list SEMICOLON

  154 $@70: %empty

  155 declaration: $@70 declaration_name declaration_content

  156 $@71: %empty

  157 declaration_content: $@71 function_declaration

  158 $@72: %empty

  159 declaration_content: $@72 argument_declaration

  160 $@73: %empty

  161 declaration_name: $@73 type_defination decorated_identifier

  162 $@74: %empty

  163 declaration_list: $@74 declaration_unit declaration_list_tail

  164 $@75: %empty

  165 declaration_list_tail: $@75 COMMA declaration_list
  166                      | %empty

  167 $@76: %empty

  168 declaration_unit: $@76 decorated_identifier declaration_init

  169 $@77: %empty

  170 declaration_init: $@77 ASSIGN expression
  171                 | %empty

  172 $@78: %empty

  173 function_argument: $@78 type_defination decorated_identifier

  174 $@79: %empty

  175 function_argument_list: $@79 function_argument function_argument_tail
  176                       | %empty

  177 $@80: %empty

  178 function_argument_tail: $@80 COMMA function_argument_list
  179                       | %empty

  180 $@81: %empty

  181 $@82: %empty

  182 $@83: %empty

  183 condition_expression: $@81 IF LP expression RP statement $@82 condition_tail $@83

  184 condition_tail: ELSE statement
  185               | %empty


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    CONSTANT (258) 65
    STRING_C (259) 143
    PRINT (260) 137
    INPUT (261) 139
    IDENTIFIER (262) 63 67 74 113
    LP (263) 61 77 80 100 137 139 151 183
    RP (264) 61 77 80 100 137 139 151 183
    LSB (265) 102
    RSB (266) 102
    LBP (267) 145
    RBP (268) 145
    POINTER (269) 67
    ADDRESS (270) 110
    NOT (271) 58
    POW (272) 53
    TIMES (273) 46 107
    DIVIDE (274) 48
    MOD (275) 44
    PLUS (276) 37
    MINUS (277) 39
    GT (278) 26
    LT (279) 30
    GE (280) 28
    LE (281) 32
    EQ (282) 19
    NE (283) 21
    AND (284) 14
    OR (285) 9
    ASSIGN (286) 4 170
    INT (287) 70
    VOID (288) 72
    COMMA (289) 90 96 165 178
    SEMICOLON (290) 77 100 115 125 129 131 133 135 137 139 153
    IF (291) 183
    ELSE (292) 184
    WHILE (293) 77 80
    DO (294) 77
    FOR (295) 100
    CONTINUE (296) 131
    BREAK (297) 129
    RETURN (298) 133
    STRUCT (299) 74
    NONE_ELSE (300)


Nonterminals, with rules where they appear

    $accept (46)
        on left: 0
    expression (47)
        on left: 2
        on right: 61 77 80 84 87 90 93 96 102 115 133 139 141 170 183
    $@1 (48)
        on left: 1
        on right: 2
    assign_expression (49)
        on left: 4 5
        on right: 2 4
    $@2 (50)
        on left: 3
        on right: 4
    orh_expression (51)
        on left: 7
        on right: 2 4
    $@3 (52)
        on left: 6
        on right: 7
    or_expression (53)
        on left: 9 10
        on right: 7 9
    $@4 (54)
        on left: 8
        on right: 9
    andh_expression (55)
        on left: 12
        on right: 7 9
    $@5 (56)
        on left: 11
        on right: 12
    and_expression (57)
        on left: 14 15
        on right: 12 14
    $@6 (58)
        on left: 13
        on right: 14
    eneh_expression (59)
        on left: 17
        on right: 12 14
    $@7 (60)
        on left: 16
        on right: 17
    ene_expression (61)
        on left: 19 21 22
        on right: 17 19 21
    $@8 (62)
        on left: 18
        on right: 19
    $@9 (63)
        on left: 20
        on right: 21
    lgh_expression (64)
        on left: 24
        on right: 17 19 21
    $@10 (65)
        on left: 23
        on right: 24
    lg_expression (66)
        on left: 26 28 30 32 33
        on right: 24 26 28 30 32
    $@11 (67)
        on left: 25
        on right: 26
    $@12 (68)
        on left: 27
        on right: 28
    $@13 (69)
        on left: 29
        on right: 30
    $@14 (70)
        on left: 31
        on right: 32
    pmh_expression (71)
        on left: 35
        on right: 24 26 28 30 32
    $@15 (72)
        on left: 34
        on right: 35
    pm_expression (73)
        on left: 37 39 40
        on right: 35 37 39
    $@16 (74)
        on left: 36
        on right: 37
    $@17 (75)
        on left: 38
        on right: 39
    mtdh_expression (76)
        on left: 42
        on right: 35 37 39
    $@18 (77)
        on left: 41
        on right: 42
    mtd_expression (78)
        on left: 44 46 48 49
        on right: 42 44 46 48
    $@19 (79)
        on left: 43
        on right: 44
    $@20 (80)
        on left: 45
        on right: 46
    $@21 (81)
        on left: 47
        on right: 48
    powh_expression (82)
        on left: 51
        on right: 42 44 46 48
    $@22 (83)
        on left: 50
        on right: 51
    pow_expression (84)
        on left: 53 54
        on right: 51 53
    $@23 (85)
        on left: 52
        on right: 53
    noth_expression (86)
        on left: 56
        on right: 51 53
    $@24 (87)
        on left: 55
        on right: 56
    not_expression (88)
        on left: 58 59
        on right: 56 58
    $@25 (89)
        on left: 57
        on right: 58
    pid_expression (90)
        on left: 61 63 65
        on right: 56 58
    $@26 (91)
        on left: 60
        on right: 61
    $@27 (92)
        on left: 62
        on right: 63
    $@28 (93)
        on left: 64
        on right: 65
    pointer_expression (94)
        on left: 67 68
        on right: 63 67
    $@29 (95)
        on left: 66
        on right: 67
    type_defination (96)
        on left: 70 72 74
        on right: 161 173
    $@30 (97)
        on left: 69
        on right: 70
    $@31 (98)
        on left: 71
        on right: 72
    $@32 (99)
        on left: 73
        on right: 74
    do_expression (100)
        on left: 77
        on right: 119
    $@33 (101)
        on left: 75
        on right: 77
    $@34 (102)
        on left: 76
        on right: 77
    while_expression (103)
        on left: 80
        on right: 121
    $@35 (104)
        on left: 78
        on right: 80
    $@36 (105)
        on left: 79
        on right: 80
    for_init_expression (106)
        on left: 82 84 85
        on right: 100
    $@37 (107)
        on left: 81
        on right: 82
    $@38 (108)
        on left: 83
        on right: 84
    for_condition_expression (109)
        on left: 87 88
        on right: 100
    $@39 (110)
        on left: 86
        on right: 87
    for_more_condition_expression (111)
        on left: 90 91
        on right: 84 87 90
    $@40 (112)
        on left: 89
        on right: 90
    for_action_expression (113)
        on left: 93 94
        on right: 100
    $@41 (114)
        on left: 92
        on right: 93
    for_more_action_expression (115)
        on left: 96 97
        on right: 93
    $@42 (116)
        on left: 95
        on right: 96
    for_expression (117)
        on left: 100
        on right: 117
    $@43 (118)
        on left: 98
        on right: 100
    $@44 (119)
        on left: 99
        on right: 100
    array_decorator (120)
        on left: 102
        on right: 104
    $@45 (121)
        on left: 101
        on right: 102
    high_level_array_decorator (122)
        on left: 104 105
        on right: 104 113
    $@46 (123)
        on left: 103
        on right: 104
    high_level_pointer_decorator (124)
        on left: 107 108
        on right: 107 113
    $@47 (125)
        on left: 106
        on right: 107
    address_decorator (126)
        on left: 110 111
        on right: 113
    $@48 (127)
        on left: 109
        on right: 110
    decorated_identifier (128)
        on left: 113
        on right: 161 168 173
    $@49 (129)
        on left: 112
        on right: 113
    statement (130)
        on left: 115 117 119 121 123 125 127 129 131 133 135 137 139
        on right: 147 183 184
    $@50 (131)
        on left: 114
        on right: 115
    $@51 (132)
        on left: 116
        on right: 117
    $@52 (133)
        on left: 118
        on right: 119
    $@53 (134)
        on left: 120
        on right: 121
    $@54 (135)
        on left: 122
        on right: 123
    $@55 (136)
        on left: 124
        on right: 125
    $@56 (137)
        on left: 126
        on right: 127
    $@57 (138)
        on left: 128
        on right: 129
    $@58 (139)
        on left: 130
        on right: 131
    $@59 (140)
        on left: 132
        on right: 133
    $@60 (141)
        on left: 134
        on right: 135
    $@61 (142)
        on left: 136
        on right: 137
    $@62 (143)
        on left: 138
        on right: 139
    print_content (144)
        on left: 141 143
        on right: 137
    $@63 (145)
        on left: 140
        on right: 141
    $@64 (146)
        on left: 142
        on right: 143
    statement_block (147)
        on left: 145
        on right: 77 80 100 127 151
    $@65 (148)
        on left: 144
        on right: 145
    statement_body (149)
        on left: 147 148
        on right: 0 145 147
    $@66 (150)
        on left: 146
        on right: 147
    function_declaration (151)
        on left: 151
        on right: 157
    $@67 (152)
        on left: 149
        on right: 151
    $@68 (153)
        on left: 150
        on right: 151
    argument_declaration (154)
        on left: 153
        on right: 159
    $@69 (155)
        on left: 152
        on right: 153
    declaration (156)
        on left: 155
        on right: 82 125
    $@70 (157)
        on left: 154
        on right: 155
    declaration_content (158)
        on left: 157 159
        on right: 155
    $@71 (159)
        on left: 156
        on right: 157
    $@72 (160)
        on left: 158
        on right: 159
    declaration_name (161)
        on left: 161
        on right: 155
    $@73 (162)
        on left: 160
        on right: 161
    declaration_list (163)
        on left: 163
        on right: 153 165
    $@74 (164)
        on left: 162
        on right: 163
    declaration_list_tail (165)
        on left: 165 166
        on right: 163
    $@75 (166)
        on left: 164
        on right: 165
    declaration_unit (167)
        on left: 168
        on right: 163
    $@76 (168)
        on left: 167
        on right: 168
    declaration_init (169)
        on left: 170 171
        on right: 168
    $@77 (170)
        on left: 169
        on right: 170
    function_argument (171)
        on left: 173
        on right: 175
    $@78 (172)
        on left: 172
        on right: 173
    function_argument_list (173)
        on left: 175 176
        on right: 151 178
    $@79 (174)
        on left: 174
        on right: 175
    function_argument_tail (175)
        on left: 178 179
        on right: 175
    $@80 (176)
        on left: 177
        on right: 178
    condition_expression (177)
        on left: 183
        on right: 123
    $@81 (178)
        on left: 180
        on right: 183
    $@82 (179)
        on left: 181
        on right: 183
    $@83 (180)
        on left: 182
        on right: 183
    condition_tail (181)
        on left: 184 185
        on right: 183


State 0

    0 $accept: . statement_body $end
  146 $@66: . %empty  [CONSTANT, PRINT, INPUT, IDENTIFIER, LP, LBP, INT, VOID, SEMICOLON, IF, WHILE, DO, FOR, CONTINUE, BREAK, RETURN, STRUCT]
  147 statement_body: . $@66 statement statement_body
  148               | . %empty  [$end]

    $end      reduce using rule 148 (statement_body)
    $default  reduce using rule 146 ($@66)

    statement_body  go to state 1
    $@66            go to state 2


State 1

    0 $accept: statement_body . $end

    $end  shift, and go to state 3


State 2

  114 $@50: . %empty  [CONSTANT, IDENTIFIER, LP]
  115 statement: . $@50 expression SEMICOLON
  116 $@51: . %empty  [FOR]
  117 statement: . $@51 for_expression
  118 $@52: . %empty  [DO]
  119 statement: . $@52 do_expression
  120 $@53: . %empty  [WHILE]
  121 statement: . $@53 while_expression
  122 $@54: . %empty  [IF]
  123 statement: . $@54 condition_expression
  124 $@55: . %empty  [INT, VOID, STRUCT]
  125 statement: . $@55 declaration SEMICOLON
  126 $@56: . %empty  [LBP]
  127 statement: . $@56 statement_block
  128 $@57: . %empty  [BREAK]
  129 statement: . $@57 BREAK SEMICOLON
  130 $@58: . %empty  [CONTINUE]
  131 statement: . $@58 CONTINUE SEMICOLON
  132 $@59: . %empty  [RETURN]
  133 statement: . $@59 RETURN expression SEMICOLON
  134 $@60: . %empty  [SEMICOLON]
  135 statement: . $@60 SEMICOLON
  136 $@61: . %empty  [PRINT]
  137 statement: . $@61 PRINT LP print_content RP SEMICOLON
  138 $@62: . %empty  [INPUT]
  139 statement: . $@62 INPUT LP expression RP SEMICOLON
  147 statement_body: $@66 . statement statement_body

    PRINT      reduce using rule 136 ($@61)
    INPUT      reduce using rule 138 ($@62)
    LBP        reduce using rule 126 ($@56)
    INT        reduce using rule 124 ($@55)
    VOID       reduce using rule 124 ($@55)
    SEMICOLON  reduce using rule 134 ($@60)
    IF         reduce using rule 122 ($@54)
    WHILE      reduce using rule 120 ($@53)
    DO         reduce using rule 118 ($@52)
    FOR        reduce using rule 116 ($@51)
    CONTINUE   reduce using rule 130 ($@58)
    BREAK      reduce using rule 128 ($@57)
    RETURN     reduce using rule 132 ($@59)
    STRUCT     reduce using rule 124 ($@55)
    $default   reduce using rule 114 ($@50)

    statement  go to state 4
    $@50       go to state 5
    $@51       go to state 6
    $@52       go to state 7
    $@53       go to state 8
    $@54       go to state 9
    $@55       go to state 10
    $@56       go to state 11
    $@57       go to state 12
    $@58       go to state 13
    $@59       go to state 14
    $@60       go to state 15
    $@61       go to state 16
    $@62       go to state 17


State 3

    0 $accept: statement_body $end .

    $default  accept


State 4

  146 $@66: . %empty  [CONSTANT, PRINT, INPUT, IDENTIFIER, LP, LBP, INT, VOID, SEMICOLON, IF, WHILE, DO, FOR, CONTINUE, BREAK, RETURN, STRUCT]
  147 statement_body: . $@66 statement statement_body
  147               | $@66 statement . statement_body
  148               | . %empty  [$end, RBP]

    $end      reduce using rule 148 (statement_body)
    RBP       reduce using rule 148 (statement_body)
    $default  reduce using rule 146 ($@66)

    statement_body  go to state 18
    $@66            go to state 2


State 5

    1 $@1: . %empty
    2 expression: . $@1 orh_expression assign_expression
  115 statement: $@50 . expression SEMICOLON

    $default  reduce using rule 1 ($@1)

    expression  go to state 19
    $@1         go to state 20


State 6

   98 $@43: . %empty
  100 for_expression: . $@43 FOR $@44 LP for_init_expression SEMICOLON for_condition_expression SEMICOLON for_action_expression RP statement_block
  117 statement: $@51 . for_expression

    $default  reduce using rule 98 ($@43)

    for_expression  go to state 21
    $@43            go to state 22


State 7

   75 $@33: . %empty
   77 do_expression: . $@33 DO $@34 statement_block WHILE LP expression RP SEMICOLON
  119 statement: $@52 . do_expression

    $default  reduce using rule 75 ($@33)

    do_expression  go to state 23
    $@33           go to state 24


State 8

   78 $@35: . %empty
   80 while_expression: . $@35 WHILE LP expression RP $@36 statement_block
  121 statement: $@53 . while_expression

    $default  reduce using rule 78 ($@35)

    while_expression  go to state 25
    $@35              go to state 26


State 9

  123 statement: $@54 . condition_expression
  180 $@81: . %empty
  183 condition_expression: . $@81 IF LP expression RP statement $@82 condition_tail $@83

    $default  reduce using rule 180 ($@81)

    condition_expression  go to state 27
    $@81                  go to state 28


State 10

  125 statement: $@55 . declaration SEMICOLON
  154 $@70: . %empty
  155 declaration: . $@70 declaration_name declaration_content

    $default  reduce using rule 154 ($@70)

    declaration  go to state 29
    $@70         go to state 30


State 11

  127 statement: $@56 . statement_block
  144 $@65: . %empty
  145 statement_block: . $@65 LBP statement_body RBP

    $default  reduce using rule 144 ($@65)

    statement_block  go to state 31
    $@65             go to state 32


State 12

  129 statement: $@57 . BREAK SEMICOLON

    BREAK  shift, and go to state 33


State 13

  131 statement: $@58 . CONTINUE SEMICOLON

    CONTINUE  shift, and go to state 34


State 14

  133 statement: $@59 . RETURN expression SEMICOLON

    RETURN  shift, and go to state 35


State 15

  135 statement: $@60 . SEMICOLON

    SEMICOLON  shift, and go to state 36


State 16

  137 statement: $@61 . PRINT LP print_content RP SEMICOLON

    PRINT  shift, and go to state 37


State 17

  139 statement: $@62 . INPUT LP expression RP SEMICOLON

    INPUT  shift, and go to state 38


State 18

  147 statement_body: $@66 statement statement_body .

    $default  reduce using rule 147 (statement_body)


State 19

  115 statement: $@50 expression . SEMICOLON

    SEMICOLON  shift, and go to state 39


State 20

    2 expression: $@1 . orh_expression assign_expression
    6 $@3: . %empty
    7 orh_expression: . $@3 andh_expression or_expression

    $default  reduce using rule 6 ($@3)

    orh_expression  go to state 40
    $@3             go to state 41


State 21

  117 statement: $@51 for_expression .

    $default  reduce using rule 117 (statement)


State 22

  100 for_expression: $@43 . FOR $@44 LP for_init_expression SEMICOLON for_condition_expression SEMICOLON for_action_expression RP statement_block

    FOR  shift, and go to state 42


State 23

  119 statement: $@52 do_expression .

    $default  reduce using rule 119 (statement)


State 24

   77 do_expression: $@33 . DO $@34 statement_block WHILE LP expression RP SEMICOLON

    DO  shift, and go to state 43


State 25

  121 statement: $@53 while_expression .

    $default  reduce using rule 121 (statement)


State 26

   80 while_expression: $@35 . WHILE LP expression RP $@36 statement_block

    WHILE  shift, and go to state 44


State 27

  123 statement: $@54 condition_expression .

    $default  reduce using rule 123 (statement)


State 28

  183 condition_expression: $@81 . IF LP expression RP statement $@82 condition_tail $@83

    IF  shift, and go to state 45


State 29

  125 statement: $@55 declaration . SEMICOLON

    SEMICOLON  shift, and go to state 46


State 30

  155 declaration: $@70 . declaration_name declaration_content
  160 $@73: . %empty
  161 declaration_name: . $@73 type_defination decorated_identifier

    $default  reduce using rule 160 ($@73)

    declaration_name  go to state 47
    $@73              go to state 48


State 31

  127 statement: $@56 statement_block .

    $default  reduce using rule 127 (statement)


State 32

  145 statement_block: $@65 . LBP statement_body RBP

    LBP  shift, and go to state 49


State 33

  129 statement: $@57 BREAK . SEMICOLON

    SEMICOLON  shift, and go to state 50


State 34

  131 statement: $@58 CONTINUE . SEMICOLON

    SEMICOLON  shift, and go to state 51


State 35

    1 $@1: . %empty
    2 expression: . $@1 orh_expression assign_expression
  133 statement: $@59 RETURN . expression SEMICOLON

    $default  reduce using rule 1 ($@1)

    expression  go to state 52
    $@1         go to state 20


State 36

  135 statement: $@60 SEMICOLON .

    $default  reduce using rule 135 (statement)


State 37

  137 statement: $@61 PRINT . LP print_content RP SEMICOLON

    LP  shift, and go to state 53


State 38

  139 statement: $@62 INPUT . LP expression RP SEMICOLON

    LP  shift, and go to state 54


State 39

  115 statement: $@50 expression SEMICOLON .

    $default  reduce using rule 115 (statement)


State 40

    2 expression: $@1 orh_expression . assign_expression
    3 $@2: . %empty  [ASSIGN]
    4 assign_expression: . $@2 ASSIGN orh_expression assign_expression
    5                  | . %empty  [RP, RSB, COMMA, SEMICOLON]

    ASSIGN    reduce using rule 3 ($@2)
    $default  reduce using rule 5 (assign_expression)

    assign_expression  go to state 55
    $@2                go to state 56


State 41

    7 orh_expression: $@3 . andh_expression or_expression
   11 $@5: . %empty
   12 andh_expression: . $@5 eneh_expression and_expression

    $default  reduce using rule 11 ($@5)

    andh_expression  go to state 57
    $@5              go to state 58


State 42

   99 $@44: . %empty
  100 for_expression: $@43 FOR . $@44 LP for_init_expression SEMICOLON for_condition_expression SEMICOLON for_action_expression RP statement_block

    $default  reduce using rule 99 ($@44)

    $@44  go to state 59


State 43

   76 $@34: . %empty
   77 do_expression: $@33 DO . $@34 statement_block WHILE LP expression RP SEMICOLON

    $default  reduce using rule 76 ($@34)

    $@34  go to state 60


State 44

   80 while_expression: $@35 WHILE . LP expression RP $@36 statement_block

    LP  shift, and go to state 61


State 45

  183 condition_expression: $@81 IF . LP expression RP statement $@82 condition_tail $@83

    LP  shift, and go to state 62


State 46

  125 statement: $@55 declaration SEMICOLON .

    $default  reduce using rule 125 (statement)


State 47

  155 declaration: $@70 declaration_name . declaration_content
  156 $@71: . %empty  [LP]
  157 declaration_content: . $@71 function_declaration
  158 $@72: . %empty  [IDENTIFIER, ADDRESS, TIMES]
  159 declaration_content: . $@72 argument_declaration

    LP        reduce using rule 156 ($@71)
    $default  reduce using rule 158 ($@72)

    declaration_content  go to state 63
    $@71                 go to state 64
    $@72                 go to state 65


State 48

   69 $@30: . %empty  [INT]
   70 type_defination: . $@30 INT
   71 $@31: . %empty  [VOID]
   72 type_defination: . $@31 VOID
   73 $@32: . %empty  [STRUCT]
   74 type_defination: . $@32 STRUCT IDENTIFIER
  161 declaration_name: $@73 . type_defination decorated_identifier

    VOID      reduce using rule 71 ($@31)
    STRUCT    reduce using rule 73 ($@32)
    $default  reduce using rule 69 ($@30)

    type_defination  go to state 66
    $@30             go to state 67
    $@31             go to state 68
    $@32             go to state 69


State 49

  145 statement_block: $@65 LBP . statement_body RBP
  146 $@66: . %empty  [CONSTANT, PRINT, INPUT, IDENTIFIER, LP, LBP, INT, VOID, SEMICOLON, IF, WHILE, DO, FOR, CONTINUE, BREAK, RETURN, STRUCT]
  147 statement_body: . $@66 statement statement_body
  148               | . %empty  [RBP]

    RBP       reduce using rule 148 (statement_body)
    $default  reduce using rule 146 ($@66)

    statement_body  go to state 70
    $@66            go to state 2


State 50

  129 statement: $@57 BREAK SEMICOLON .

    $default  reduce using rule 129 (statement)


State 51

  131 statement: $@58 CONTINUE SEMICOLON .

    $default  reduce using rule 131 (statement)


State 52

  133 statement: $@59 RETURN expression . SEMICOLON

    SEMICOLON  shift, and go to state 71


State 53

  137 statement: $@61 PRINT LP . print_content RP SEMICOLON
  140 $@63: . %empty  [CONSTANT, IDENTIFIER, LP]
  141 print_content: . $@63 expression
  142 $@64: . %empty  [STRING_C]
  143 print_content: . $@64 STRING_C

    STRING_C  reduce using rule 142 ($@64)
    $default  reduce using rule 140 ($@63)

    print_content  go to state 72
    $@63           go to state 73
    $@64           go to state 74


State 54

    1 $@1: . %empty
    2 expression: . $@1 orh_expression assign_expression
  139 statement: $@62 INPUT LP . expression RP SEMICOLON

    $default  reduce using rule 1 ($@1)

    expression  go to state 75
    $@1         go to state 20


State 55

    2 expression: $@1 orh_expression assign_expression .

    $default  reduce using rule 2 (expression)


State 56

    4 assign_expression: $@2 . ASSIGN orh_expression assign_expression

    ASSIGN  shift, and go to state 76


State 57

    7 orh_expression: $@3 andh_expression . or_expression
    8 $@4: . %empty  [OR]
    9 or_expression: . $@4 OR andh_expression or_expression
   10              | . %empty  [RP, RSB, ASSIGN, COMMA, SEMICOLON]

    OR        reduce using rule 8 ($@4)
    $default  reduce using rule 10 (or_expression)

    or_expression  go to state 77
    $@4            go to state 78


State 58

   12 andh_expression: $@5 . eneh_expression and_expression
   16 $@7: . %empty
   17 eneh_expression: . $@7 lgh_expression ene_expression

    $default  reduce using rule 16 ($@7)

    eneh_expression  go to state 79
    $@7              go to state 80


State 59

  100 for_expression: $@43 FOR $@44 . LP for_init_expression SEMICOLON for_condition_expression SEMICOLON for_action_expression RP statement_block

    LP  shift, and go to state 81


State 60

   77 do_expression: $@33 DO $@34 . statement_block WHILE LP expression RP SEMICOLON
  144 $@65: . %empty
  145 statement_block: . $@65 LBP statement_body RBP

    $default  reduce using rule 144 ($@65)

    statement_block  go to state 82
    $@65             go to state 32


State 61

    1 $@1: . %empty
    2 expression: . $@1 orh_expression assign_expression
   80 while_expression: $@35 WHILE LP . expression RP $@36 statement_block

    $default  reduce using rule 1 ($@1)

    expression  go to state 83
    $@1         go to state 20


State 62

    1 $@1: . %empty
    2 expression: . $@1 orh_expression assign_expression
  183 condition_expression: $@81 IF LP . expression RP statement $@82 condition_tail $@83

    $default  reduce using rule 1 ($@1)

    expression  go to state 84
    $@1         go to state 20


State 63

  155 declaration: $@70 declaration_name declaration_content .

    $default  reduce using rule 155 (declaration)


State 64

  149 $@67: . %empty
  151 function_declaration: . $@67 LP function_argument_list RP $@68 statement_block
  157 declaration_content: $@71 . function_declaration

    $default  reduce using rule 149 ($@67)

    function_declaration  go to state 85
    $@67                  go to state 86


State 65

  152 $@69: . %empty
  153 argument_declaration: . $@69 declaration_list SEMICOLON
  159 declaration_content: $@72 . argument_declaration

    $default  reduce using rule 152 ($@69)

    argument_declaration  go to state 87
    $@69                  go to state 88


State 66

  112 $@49: . %empty
  113 decorated_identifier: . $@49 address_decorator high_level_pointer_decorator IDENTIFIER high_level_array_decorator
  161 declaration_name: $@73 type_defination . decorated_identifier

    $default  reduce using rule 112 ($@49)

    decorated_identifier  go to state 89
    $@49                  go to state 90


State 67

   70 type_defination: $@30 . INT

    INT  shift, and go to state 91


State 68

   72 type_defination: $@31 . VOID

    VOID  shift, and go to state 92


State 69

   74 type_defination: $@32 . STRUCT IDENTIFIER

    STRUCT  shift, and go to state 93


State 70

  145 statement_block: $@65 LBP statement_body . RBP

    RBP  shift, and go to state 94


State 71

  133 statement: $@59 RETURN expression SEMICOLON .

    $default  reduce using rule 133 (statement)


State 72

  137 statement: $@61 PRINT LP print_content . RP SEMICOLON

    RP  shift, and go to state 95


State 73

    1 $@1: . %empty
    2 expression: . $@1 orh_expression assign_expression
  141 print_content: $@63 . expression

    $default  reduce using rule 1 ($@1)

    expression  go to state 96
    $@1         go to state 20


State 74

  143 print_content: $@64 . STRING_C

    STRING_C  shift, and go to state 97


State 75

  139 statement: $@62 INPUT LP expression . RP SEMICOLON

    RP  shift, and go to state 98


State 76

    4 assign_expression: $@2 ASSIGN . orh_expression assign_expression
    6 $@3: . %empty
    7 orh_expression: . $@3 andh_expression or_expression

    $default  reduce using rule 6 ($@3)

    orh_expression  go to state 99
    $@3             go to state 41


State 77

    7 orh_expression: $@3 andh_expression or_expression .

    $default  reduce using rule 7 (orh_expression)


State 78

    9 or_expression: $@4 . OR andh_expression or_expression

    OR  shift, and go to state 100


State 79

   12 andh_expression: $@5 eneh_expression . and_expression
   13 $@6: . %empty  [AND]
   14 and_expression: . $@6 AND eneh_expression and_expression
   15               | . %empty  [RP, RSB, OR, ASSIGN, COMMA, SEMICOLON]

    AND       reduce using rule 13 ($@6)
    $default  reduce using rule 15 (and_expression)

    and_expression  go to state 101
    $@6             go to state 102


State 80

   17 eneh_expression: $@7 . lgh_expression ene_expression
   23 $@10: . %empty
   24 lgh_expression: . $@10 pmh_expression lg_expression

    $default  reduce using rule 23 ($@10)

    lgh_expression  go to state 103
    $@10            go to state 104


State 81

   81 $@37: . %empty  [INT, VOID, STRUCT]
   82 for_init_expression: . $@37 declaration
   83 $@38: . %empty  [CONSTANT, IDENTIFIER, LP]
   84 for_init_expression: . $@38 expression for_more_condition_expression
   85                    | . %empty  [SEMICOLON]
  100 for_expression: $@43 FOR $@44 LP . for_init_expression SEMICOLON for_condition_expression SEMICOLON for_action_expression RP statement_block

    CONSTANT    reduce using rule 83 ($@38)
    IDENTIFIER  reduce using rule 83 ($@38)
    LP          reduce using rule 83 ($@38)
    SEMICOLON   reduce using rule 85 (for_init_expression)
    $default    reduce using rule 81 ($@37)

    for_init_expression  go to state 105
    $@37                 go to state 106
    $@38                 go to state 107


State 82

   77 do_expression: $@33 DO $@34 statement_block . WHILE LP expression RP SEMICOLON

    WHILE  shift, and go to state 108


State 83

   80 while_expression: $@35 WHILE LP expression . RP $@36 statement_block

    RP  shift, and go to state 109


State 84

  183 condition_expression: $@81 IF LP expression . RP statement $@82 condition_tail $@83

    RP  shift, and go to state 110


State 85

  157 declaration_content: $@71 function_declaration .

    $default  reduce using rule 157 (declaration_content)


State 86

  151 function_declaration: $@67 . LP function_argument_list RP $@68 statement_block

    LP  shift, and go to state 111


State 87

  159 declaration_content: $@72 argument_declaration .

    $default  reduce using rule 159 (declaration_content)


State 88

  153 argument_declaration: $@69 . declaration_list SEMICOLON
  162 $@74: . %empty
  163 declaration_list: . $@74 declaration_unit declaration_list_tail

    $default  reduce using rule 162 ($@74)

    declaration_list  go to state 112
    $@74              go to state 113


State 89

  161 declaration_name: $@73 type_defination decorated_identifier .

    $default  reduce using rule 161 (declaration_name)


State 90

  109 $@48: . %empty  [ADDRESS]
  110 address_decorator: . $@48 ADDRESS
  111                  | . %empty  [IDENTIFIER, TIMES]
  113 decorated_identifier: $@49 . address_decorator high_level_pointer_decorator IDENTIFIER high_level_array_decorator

    ADDRESS   reduce using rule 109 ($@48)
    $default  reduce using rule 111 (address_decorator)

    address_decorator  go to state 114
    $@48               go to state 115


State 91

   70 type_defination: $@30 INT .

    $default  reduce using rule 70 (type_defination)


State 92

   72 type_defination: $@31 VOID .

    $default  reduce using rule 72 (type_defination)


State 93

   74 type_defination: $@32 STRUCT . IDENTIFIER

    IDENTIFIER  shift, and go to state 116


State 94

  145 statement_block: $@65 LBP statement_body RBP .

    $default  reduce using rule 145 (statement_block)


State 95

  137 statement: $@61 PRINT LP print_content RP . SEMICOLON

    SEMICOLON  shift, and go to state 117


State 96

  141 print_content: $@63 expression .

    $default  reduce using rule 141 (print_content)


State 97

  143 print_content: $@64 STRING_C .

    $default  reduce using rule 143 (print_content)


State 98

  139 statement: $@62 INPUT LP expression RP . SEMICOLON

    SEMICOLON  shift, and go to state 118


State 99

    3 $@2: . %empty  [ASSIGN]
    4 assign_expression: . $@2 ASSIGN orh_expression assign_expression
    4                  | $@2 ASSIGN orh_expression . assign_expression
    5                  | . %empty  [RP, RSB, COMMA, SEMICOLON]

    ASSIGN    reduce using rule 3 ($@2)
    $default  reduce using rule 5 (assign_expression)

    assign_expression  go to state 119
    $@2                go to state 56


State 100

    9 or_expression: $@4 OR . andh_expression or_expression
   11 $@5: . %empty
   12 andh_expression: . $@5 eneh_expression and_expression

    $default  reduce using rule 11 ($@5)

    andh_expression  go to state 120
    $@5              go to state 58


State 101

   12 andh_expression: $@5 eneh_expression and_expression .

    $default  reduce using rule 12 (andh_expression)


State 102

   14 and_expression: $@6 . AND eneh_expression and_expression

    AND  shift, and go to state 121


State 103

   17 eneh_expression: $@7 lgh_expression . ene_expression
   18 $@8: . %empty  [EQ]
   19 ene_expression: . $@8 EQ lgh_expression ene_expression
   20 $@9: . %empty  [NE]
   21 ene_expression: . $@9 NE lgh_expression ene_expression
   22               | . %empty  [RP, RSB, AND, OR, ASSIGN, COMMA, SEMICOLON]

    EQ        reduce using rule 18 ($@8)
    NE        reduce using rule 20 ($@9)
    $default  reduce using rule 22 (ene_expression)

    ene_expression  go to state 122
    $@8             go to state 123
    $@9             go to state 124


State 104

   24 lgh_expression: $@10 . pmh_expression lg_expression
   34 $@15: . %empty
   35 pmh_expression: . $@15 mtdh_expression pm_expression

    $default  reduce using rule 34 ($@15)

    pmh_expression  go to state 125
    $@15            go to state 126


State 105

  100 for_expression: $@43 FOR $@44 LP for_init_expression . SEMICOLON for_condition_expression SEMICOLON for_action_expression RP statement_block

    SEMICOLON  shift, and go to state 127


State 106

   82 for_init_expression: $@37 . declaration
  154 $@70: . %empty
  155 declaration: . $@70 declaration_name declaration_content

    $default  reduce using rule 154 ($@70)

    declaration  go to state 128
    $@70         go to state 30


State 107

    1 $@1: . %empty
    2 expression: . $@1 orh_expression assign_expression
   84 for_init_expression: $@38 . expression for_more_condition_expression

    $default  reduce using rule 1 ($@1)

    expression  go to state 129
    $@1         go to state 20


State 108

   77 do_expression: $@33 DO $@34 statement_block WHILE . LP expression RP SEMICOLON

    LP  shift, and go to state 130


State 109

   79 $@36: . %empty
   80 while_expression: $@35 WHILE LP expression RP . $@36 statement_block

    $default  reduce using rule 79 ($@36)

    $@36  go to state 131


State 110

  114 $@50: . %empty  [CONSTANT, IDENTIFIER, LP]
  115 statement: . $@50 expression SEMICOLON
  116 $@51: . %empty  [FOR]
  117 statement: . $@51 for_expression
  118 $@52: . %empty  [DO]
  119 statement: . $@52 do_expression
  120 $@53: . %empty  [WHILE]
  121 statement: . $@53 while_expression
  122 $@54: . %empty  [IF]
  123 statement: . $@54 condition_expression
  124 $@55: . %empty  [INT, VOID, STRUCT]
  125 statement: . $@55 declaration SEMICOLON
  126 $@56: . %empty  [LBP]
  127 statement: . $@56 statement_block
  128 $@57: . %empty  [BREAK]
  129 statement: . $@57 BREAK SEMICOLON
  130 $@58: . %empty  [CONTINUE]
  131 statement: . $@58 CONTINUE SEMICOLON
  132 $@59: . %empty  [RETURN]
  133 statement: . $@59 RETURN expression SEMICOLON
  134 $@60: . %empty  [SEMICOLON]
  135 statement: . $@60 SEMICOLON
  136 $@61: . %empty  [PRINT]
  137 statement: . $@61 PRINT LP print_content RP SEMICOLON
  138 $@62: . %empty  [INPUT]
  139 statement: . $@62 INPUT LP expression RP SEMICOLON
  183 condition_expression: $@81 IF LP expression RP . statement $@82 condition_tail $@83

    PRINT      reduce using rule 136 ($@61)
    INPUT      reduce using rule 138 ($@62)
    LBP        reduce using rule 126 ($@56)
    INT        reduce using rule 124 ($@55)
    VOID       reduce using rule 124 ($@55)
    SEMICOLON  reduce using rule 134 ($@60)
    IF         reduce using rule 122 ($@54)
    WHILE      reduce using rule 120 ($@53)
    DO         reduce using rule 118 ($@52)
    FOR        reduce using rule 116 ($@51)
    CONTINUE   reduce using rule 130 ($@58)
    BREAK      reduce using rule 128 ($@57)
    RETURN     reduce using rule 132 ($@59)
    STRUCT     reduce using rule 124 ($@55)
    $default   reduce using rule 114 ($@50)

    statement  go to state 132
    $@50       go to state 5
    $@51       go to state 6
    $@52       go to state 7
    $@53       go to state 8
    $@54       go to state 9
    $@55       go to state 10
    $@56       go to state 11
    $@57       go to state 12
    $@58       go to state 13
    $@59       go to state 14
    $@60       go to state 15
    $@61       go to state 16
    $@62       go to state 17


State 111

  151 function_declaration: $@67 LP . function_argument_list RP $@68 statement_block
  174 $@79: . %empty  [INT, VOID, STRUCT]
  175 function_argument_list: . $@79 function_argument function_argument_tail
  176                       | . %empty  [RP]

    RP        reduce using rule 176 (function_argument_list)
    $default  reduce using rule 174 ($@79)

    function_argument_list  go to state 133
    $@79                    go to state 134


State 112

  153 argument_declaration: $@69 declaration_list . SEMICOLON

    SEMICOLON  shift, and go to state 135


State 113

  163 declaration_list: $@74 . declaration_unit declaration_list_tail
  167 $@76: . %empty
  168 declaration_unit: . $@76 decorated_identifier declaration_init

    $default  reduce using rule 167 ($@76)

    declaration_unit  go to state 136
    $@76              go to state 137


State 114

  106 $@47: . %empty  [TIMES]
  107 high_level_pointer_decorator: . $@47 TIMES high_level_pointer_decorator
  108                             | . %empty  [IDENTIFIER]
  113 decorated_identifier: $@49 address_decorator . high_level_pointer_decorator IDENTIFIER high_level_array_decorator

    IDENTIFIER  reduce using rule 108 (high_level_pointer_decorator)
    $default    reduce using rule 106 ($@47)

    high_level_pointer_decorator  go to state 138
    $@47                          go to state 139


State 115

  110 address_decorator: $@48 . ADDRESS

    ADDRESS  shift, and go to state 140


State 116

   74 type_defination: $@32 STRUCT IDENTIFIER .

    $default  reduce using rule 74 (type_defination)


State 117

  137 statement: $@61 PRINT LP print_content RP SEMICOLON .

    $default  reduce using rule 137 (statement)


State 118

  139 statement: $@62 INPUT LP expression RP SEMICOLON .

    $default  reduce using rule 139 (statement)


State 119

    4 assign_expression: $@2 ASSIGN orh_expression assign_expression .

    $default  reduce using rule 4 (assign_expression)


State 120

    8 $@4: . %empty  [OR]
    9 or_expression: . $@4 OR andh_expression or_expression
    9              | $@4 OR andh_expression . or_expression
   10              | . %empty  [RP, RSB, ASSIGN, COMMA, SEMICOLON]

    OR        reduce using rule 8 ($@4)
    $default  reduce using rule 10 (or_expression)

    or_expression  go to state 141
    $@4            go to state 78


State 121

   14 and_expression: $@6 AND . eneh_expression and_expression
   16 $@7: . %empty
   17 eneh_expression: . $@7 lgh_expression ene_expression

    $default  reduce using rule 16 ($@7)

    eneh_expression  go to state 142
    $@7              go to state 80


State 122

   17 eneh_expression: $@7 lgh_expression ene_expression .

    $default  reduce using rule 17 (eneh_expression)


State 123

   19 ene_expression: $@8 . EQ lgh_expression ene_expression

    EQ  shift, and go to state 143


State 124

   21 ene_expression: $@9 . NE lgh_expression ene_expression

    NE  shift, and go to state 144


State 125

   24 lgh_expression: $@10 pmh_expression . lg_expression
   25 $@11: . %empty  [GT]
   26 lg_expression: . $@11 GT pmh_expression lg_expression
   27 $@12: . %empty  [GE]
   28 lg_expression: . $@12 GE pmh_expression lg_expression
   29 $@13: . %empty  [LT]
   30 lg_expression: . $@13 LT pmh_expression lg_expression
   31 $@14: . %empty  [LE]
   32 lg_expression: . $@14 LE pmh_expression lg_expression
   33              | . %empty  [RP, RSB, EQ, NE, AND, OR, ASSIGN, COMMA, SEMICOLON]

    GT        reduce using rule 25 ($@11)
    LT        reduce using rule 29 ($@13)
    GE        reduce using rule 27 ($@12)
    LE        reduce using rule 31 ($@14)
    $default  reduce using rule 33 (lg_expression)

    lg_expression  go to state 145
    $@11           go to state 146
    $@12           go to state 147
    $@13           go to state 148
    $@14           go to state 149


State 126

   35 pmh_expression: $@15 . mtdh_expression pm_expression
   41 $@18: . %empty
   42 mtdh_expression: . $@18 powh_expression mtd_expression

    $default  reduce using rule 41 ($@18)

    mtdh_expression  go to state 150
    $@18             go to state 151


State 127

   86 $@39: . %empty  [CONSTANT, IDENTIFIER, LP]
   87 for_condition_expression: . $@39 expression for_more_condition_expression
   88                         | . %empty  [SEMICOLON]
  100 for_expression: $@43 FOR $@44 LP for_init_expression SEMICOLON . for_condition_expression SEMICOLON for_action_expression RP statement_block

    SEMICOLON  reduce using rule 88 (for_condition_expression)
    $default   reduce using rule 86 ($@39)

    for_condition_expression  go to state 152
    $@39                      go to state 153


State 128

   82 for_init_expression: $@37 declaration .

    $default  reduce using rule 82 (for_init_expression)


State 129

   84 for_init_expression: $@38 expression . for_more_condition_expression
   89 $@40: . %empty  [COMMA]
   90 for_more_condition_expression: . $@40 COMMA expression for_more_condition_expression
   91                              | . %empty  [SEMICOLON]

    SEMICOLON  reduce using rule 91 (for_more_condition_expression)
    $default   reduce using rule 89 ($@40)

    for_more_condition_expression  go to state 154
    $@40                           go to state 155


State 130

    1 $@1: . %empty
    2 expression: . $@1 orh_expression assign_expression
   77 do_expression: $@33 DO $@34 statement_block WHILE LP . expression RP SEMICOLON

    $default  reduce using rule 1 ($@1)

    expression  go to state 156
    $@1         go to state 20


State 131

   80 while_expression: $@35 WHILE LP expression RP $@36 . statement_block
  144 $@65: . %empty
  145 statement_block: . $@65 LBP statement_body RBP

    $default  reduce using rule 144 ($@65)

    statement_block  go to state 157
    $@65             go to state 32


State 132

  181 $@82: . %empty
  183 condition_expression: $@81 IF LP expression RP statement . $@82 condition_tail $@83

    $default  reduce using rule 181 ($@82)

    $@82  go to state 158


State 133

  151 function_declaration: $@67 LP function_argument_list . RP $@68 statement_block

    RP  shift, and go to state 159


State 134

  172 $@78: . %empty
  173 function_argument: . $@78 type_defination decorated_identifier
  175 function_argument_list: $@79 . function_argument function_argument_tail

    $default  reduce using rule 172 ($@78)

    function_argument  go to state 160
    $@78               go to state 161


State 135

  153 argument_declaration: $@69 declaration_list SEMICOLON .

    $default  reduce using rule 153 (argument_declaration)


State 136

  163 declaration_list: $@74 declaration_unit . declaration_list_tail
  164 $@75: . %empty  [COMMA]
  165 declaration_list_tail: . $@75 COMMA declaration_list
  166                      | . %empty  [SEMICOLON]

    SEMICOLON  reduce using rule 166 (declaration_list_tail)
    $default   reduce using rule 164 ($@75)

    declaration_list_tail  go to state 162
    $@75                   go to state 163


State 137

  112 $@49: . %empty
  113 decorated_identifier: . $@49 address_decorator high_level_pointer_decorator IDENTIFIER high_level_array_decorator
  168 declaration_unit: $@76 . decorated_identifier declaration_init

    $default  reduce using rule 112 ($@49)

    decorated_identifier  go to state 164
    $@49                  go to state 90


State 138

  113 decorated_identifier: $@49 address_decorator high_level_pointer_decorator . IDENTIFIER high_level_array_decorator

    IDENTIFIER  shift, and go to state 165


State 139

  107 high_level_pointer_decorator: $@47 . TIMES high_level_pointer_decorator

    TIMES  shift, and go to state 166


State 140

  110 address_decorator: $@48 ADDRESS .

    $default  reduce using rule 110 (address_decorator)


State 141

    9 or_expression: $@4 OR andh_expression or_expression .

    $default  reduce using rule 9 (or_expression)


State 142

   13 $@6: . %empty  [AND]
   14 and_expression: . $@6 AND eneh_expression and_expression
   14               | $@6 AND eneh_expression . and_expression
   15               | . %empty  [RP, RSB, OR, ASSIGN, COMMA, SEMICOLON]

    AND       reduce using rule 13 ($@6)
    $default  reduce using rule 15 (and_expression)

    and_expression  go to state 167
    $@6             go to state 102


State 143

   19 ene_expression: $@8 EQ . lgh_expression ene_expression
   23 $@10: . %empty
   24 lgh_expression: . $@10 pmh_expression lg_expression

    $default  reduce using rule 23 ($@10)

    lgh_expression  go to state 168
    $@10            go to state 104


State 144

   21 ene_expression: $@9 NE . lgh_expression ene_expression
   23 $@10: . %empty
   24 lgh_expression: . $@10 pmh_expression lg_expression

    $default  reduce using rule 23 ($@10)

    lgh_expression  go to state 169
    $@10            go to state 104


State 145

   24 lgh_expression: $@10 pmh_expression lg_expression .

    $default  reduce using rule 24 (lgh_expression)


State 146

   26 lg_expression: $@11 . GT pmh_expression lg_expression

    GT  shift, and go to state 170


State 147

   28 lg_expression: $@12 . GE pmh_expression lg_expression

    GE  shift, and go to state 171


State 148

   30 lg_expression: $@13 . LT pmh_expression lg_expression

    LT  shift, and go to state 172


State 149

   32 lg_expression: $@14 . LE pmh_expression lg_expression

    LE  shift, and go to state 173


State 150

   35 pmh_expression: $@15 mtdh_expression . pm_expression
   36 $@16: . %empty  [PLUS]
   37 pm_expression: . $@16 PLUS mtdh_expression pm_expression
   38 $@17: . %empty  [MINUS]
   39 pm_expression: . $@17 MINUS mtdh_expression pm_expression
   40              | . %empty  [RP, RSB, GT, LT, GE, LE, EQ, NE, AND, OR, ASSIGN, COMMA, SEMICOLON]

    PLUS      reduce using rule 36 ($@16)
    MINUS     reduce using rule 38 ($@17)
    $default  reduce using rule 40 (pm_expression)

    pm_expression  go to state 174
    $@16           go to state 175
    $@17           go to state 176


State 151

   42 mtdh_expression: $@18 . powh_expression mtd_expression
   50 $@22: . %empty
   51 powh_expression: . $@22 noth_expression pow_expression

    $default  reduce using rule 50 ($@22)

    powh_expression  go to state 177
    $@22             go to state 178


State 152

  100 for_expression: $@43 FOR $@44 LP for_init_expression SEMICOLON for_condition_expression . SEMICOLON for_action_expression RP statement_block

    SEMICOLON  shift, and go to state 179


State 153

    1 $@1: . %empty
    2 expression: . $@1 orh_expression assign_expression
   87 for_condition_expression: $@39 . expression for_more_condition_expression

    $default  reduce using rule 1 ($@1)

    expression  go to state 180
    $@1         go to state 20


State 154

   84 for_init_expression: $@38 expression for_more_condition_expression .

    $default  reduce using rule 84 (for_init_expression)


State 155

   90 for_more_condition_expression: $@40 . COMMA expression for_more_condition_expression

    COMMA  shift, and go to state 181


State 156

   77 do_expression: $@33 DO $@34 statement_block WHILE LP expression . RP SEMICOLON

    RP  shift, and go to state 182


State 157

   80 while_expression: $@35 WHILE LP expression RP $@36 statement_block .

    $default  reduce using rule 80 (while_expression)


State 158

  183 condition_expression: $@81 IF LP expression RP statement $@82 . condition_tail $@83
  184 condition_tail: . ELSE statement
  185               | . %empty  [$end, CONSTANT, PRINT, INPUT, IDENTIFIER, LP, LBP, RBP, INT, VOID, SEMICOLON, IF, WHILE, DO, FOR, CONTINUE, BREAK, RETURN, STRUCT]

    ELSE  shift, and go to state 183

    $default  reduce using rule 185 (condition_tail)

    condition_tail  go to state 184

    Conflict between rule 185 and token ELSE resolved as shift (NONE_ELSE < ELSE).


State 159

  150 $@68: . %empty
  151 function_declaration: $@67 LP function_argument_list RP . $@68 statement_block

    $default  reduce using rule 150 ($@68)

    $@68  go to state 185


State 160

  175 function_argument_list: $@79 function_argument . function_argument_tail
  177 $@80: . %empty  [COMMA]
  178 function_argument_tail: . $@80 COMMA function_argument_list
  179                       | . %empty  [RP]

    RP        reduce using rule 179 (function_argument_tail)
    $default  reduce using rule 177 ($@80)

    function_argument_tail  go to state 186
    $@80                    go to state 187


State 161

   69 $@30: . %empty  [INT]
   70 type_defination: . $@30 INT
   71 $@31: . %empty  [VOID]
   72 type_defination: . $@31 VOID
   73 $@32: . %empty  [STRUCT]
   74 type_defination: . $@32 STRUCT IDENTIFIER
  173 function_argument: $@78 . type_defination decorated_identifier

    VOID      reduce using rule 71 ($@31)
    STRUCT    reduce using rule 73 ($@32)
    $default  reduce using rule 69 ($@30)

    type_defination  go to state 188
    $@30             go to state 67
    $@31             go to state 68
    $@32             go to state 69


State 162

  163 declaration_list: $@74 declaration_unit declaration_list_tail .

    $default  reduce using rule 163 (declaration_list)


State 163

  165 declaration_list_tail: $@75 . COMMA declaration_list

    COMMA  shift, and go to state 189


State 164

  168 declaration_unit: $@76 decorated_identifier . declaration_init
  169 $@77: . %empty  [ASSIGN]
  170 declaration_init: . $@77 ASSIGN expression
  171                 | . %empty  [COMMA, SEMICOLON]

    ASSIGN    reduce using rule 169 ($@77)
    $default  reduce using rule 171 (declaration_init)

    declaration_init  go to state 190
    $@77              go to state 191


State 165

  103 $@46: . %empty  [LSB]
  104 high_level_array_decorator: . $@46 array_decorator high_level_array_decorator
  105                           | . %empty  [IDENTIFIER, LP, RP, ADDRESS, TIMES, ASSIGN, COMMA, SEMICOLON]
  113 decorated_identifier: $@49 address_decorator high_level_pointer_decorator IDENTIFIER . high_level_array_decorator

    LSB       reduce using rule 103 ($@46)
    $default  reduce using rule 105 (high_level_array_decorator)

    high_level_array_decorator  go to state 192
    $@46                        go to state 193


State 166

  106 $@47: . %empty  [TIMES]
  107 high_level_pointer_decorator: . $@47 TIMES high_level_pointer_decorator
  107                             | $@47 TIMES . high_level_pointer_decorator
  108                             | . %empty  [IDENTIFIER]

    IDENTIFIER  reduce using rule 108 (high_level_pointer_decorator)
    $default    reduce using rule 106 ($@47)

    high_level_pointer_decorator  go to state 194
    $@47                          go to state 139


State 167

   14 and_expression: $@6 AND eneh_expression and_expression .

    $default  reduce using rule 14 (and_expression)


State 168

   18 $@8: . %empty  [EQ]
   19 ene_expression: . $@8 EQ lgh_expression ene_expression
   19               | $@8 EQ lgh_expression . ene_expression
   20 $@9: . %empty  [NE]
   21 ene_expression: . $@9 NE lgh_expression ene_expression
   22               | . %empty  [RP, RSB, AND, OR, ASSIGN, COMMA, SEMICOLON]

    EQ        reduce using rule 18 ($@8)
    NE        reduce using rule 20 ($@9)
    $default  reduce using rule 22 (ene_expression)

    ene_expression  go to state 195
    $@8             go to state 123
    $@9             go to state 124


State 169

   18 $@8: . %empty  [EQ]
   19 ene_expression: . $@8 EQ lgh_expression ene_expression
   20 $@9: . %empty  [NE]
   21 ene_expression: . $@9 NE lgh_expression ene_expression
   21               | $@9 NE lgh_expression . ene_expression
   22               | . %empty  [RP, RSB, AND, OR, ASSIGN, COMMA, SEMICOLON]

    EQ        reduce using rule 18 ($@8)
    NE        reduce using rule 20 ($@9)
    $default  reduce using rule 22 (ene_expression)

    ene_expression  go to state 196
    $@8             go to state 123
    $@9             go to state 124


State 170

   26 lg_expression: $@11 GT . pmh_expression lg_expression
   34 $@15: . %empty
   35 pmh_expression: . $@15 mtdh_expression pm_expression

    $default  reduce using rule 34 ($@15)

    pmh_expression  go to state 197
    $@15            go to state 126


State 171

   28 lg_expression: $@12 GE . pmh_expression lg_expression
   34 $@15: . %empty
   35 pmh_expression: . $@15 mtdh_expression pm_expression

    $default  reduce using rule 34 ($@15)

    pmh_expression  go to state 198
    $@15            go to state 126


State 172

   30 lg_expression: $@13 LT . pmh_expression lg_expression
   34 $@15: . %empty
   35 pmh_expression: . $@15 mtdh_expression pm_expression

    $default  reduce using rule 34 ($@15)

    pmh_expression  go to state 199
    $@15            go to state 126


State 173

   32 lg_expression: $@14 LE . pmh_expression lg_expression
   34 $@15: . %empty
   35 pmh_expression: . $@15 mtdh_expression pm_expression

    $default  reduce using rule 34 ($@15)

    pmh_expression  go to state 200
    $@15            go to state 126


State 174

   35 pmh_expression: $@15 mtdh_expression pm_expression .

    $default  reduce using rule 35 (pmh_expression)


State 175

   37 pm_expression: $@16 . PLUS mtdh_expression pm_expression

    PLUS  shift, and go to state 201


State 176

   39 pm_expression: $@17 . MINUS mtdh_expression pm_expression

    MINUS  shift, and go to state 202


State 177

   42 mtdh_expression: $@18 powh_expression . mtd_expression
   43 $@19: . %empty  [MOD]
   44 mtd_expression: . $@19 MOD powh_expression mtd_expression
   45 $@20: . %empty  [TIMES]
   46 mtd_expression: . $@20 TIMES powh_expression mtd_expression
   47 $@21: . %empty  [DIVIDE]
   48 mtd_expression: . $@21 DIVIDE powh_expression mtd_expression
   49               | . %empty  [RP, RSB, PLUS, MINUS, GT, LT, GE, LE, EQ, NE, AND, OR, ASSIGN, COMMA, SEMICOLON]

    TIMES     reduce using rule 45 ($@20)
    DIVIDE    reduce using rule 47 ($@21)
    MOD       reduce using rule 43 ($@19)
    $default  reduce using rule 49 (mtd_expression)

    mtd_expression  go to state 203
    $@19            go to state 204
    $@20            go to state 205
    $@21            go to state 206


State 178

   51 powh_expression: $@22 . noth_expression pow_expression
   55 $@24: . %empty
   56 noth_expression: . $@24 pid_expression not_expression

    $default  reduce using rule 55 ($@24)

    noth_expression  go to state 207
    $@24             go to state 208


State 179

   92 $@41: . %empty  [CONSTANT, IDENTIFIER, LP]
   93 for_action_expression: . $@41 expression for_more_action_expression
   94                      | . %empty  [RP]
  100 for_expression: $@43 FOR $@44 LP for_init_expression SEMICOLON for_condition_expression SEMICOLON . for_action_expression RP statement_block

    RP        reduce using rule 94 (for_action_expression)
    $default  reduce using rule 92 ($@41)

    for_action_expression  go to state 209
    $@41                   go to state 210


State 180

   87 for_condition_expression: $@39 expression . for_more_condition_expression
   89 $@40: . %empty  [COMMA]
   90 for_more_condition_expression: . $@40 COMMA expression for_more_condition_expression
   91                              | . %empty  [SEMICOLON]

    SEMICOLON  reduce using rule 91 (for_more_condition_expression)
    $default   reduce using rule 89 ($@40)

    for_more_condition_expression  go to state 211
    $@40                           go to state 155


State 181

    1 $@1: . %empty
    2 expression: . $@1 orh_expression assign_expression
   90 for_more_condition_expression: $@40 COMMA . expression for_more_condition_expression

    $default  reduce using rule 1 ($@1)

    expression  go to state 212
    $@1         go to state 20


State 182

   77 do_expression: $@33 DO $@34 statement_block WHILE LP expression RP . SEMICOLON

    SEMICOLON  shift, and go to state 213


State 183

  114 $@50: . %empty  [CONSTANT, IDENTIFIER, LP]
  115 statement: . $@50 expression SEMICOLON
  116 $@51: . %empty  [FOR]
  117 statement: . $@51 for_expression
  118 $@52: . %empty  [DO]
  119 statement: . $@52 do_expression
  120 $@53: . %empty  [WHILE]
  121 statement: . $@53 while_expression
  122 $@54: . %empty  [IF]
  123 statement: . $@54 condition_expression
  124 $@55: . %empty  [INT, VOID, STRUCT]
  125 statement: . $@55 declaration SEMICOLON
  126 $@56: . %empty  [LBP]
  127 statement: . $@56 statement_block
  128 $@57: . %empty  [BREAK]
  129 statement: . $@57 BREAK SEMICOLON
  130 $@58: . %empty  [CONTINUE]
  131 statement: . $@58 CONTINUE SEMICOLON
  132 $@59: . %empty  [RETURN]
  133 statement: . $@59 RETURN expression SEMICOLON
  134 $@60: . %empty  [SEMICOLON]
  135 statement: . $@60 SEMICOLON
  136 $@61: . %empty  [PRINT]
  137 statement: . $@61 PRINT LP print_content RP SEMICOLON
  138 $@62: . %empty  [INPUT]
  139 statement: . $@62 INPUT LP expression RP SEMICOLON
  184 condition_tail: ELSE . statement

    PRINT      reduce using rule 136 ($@61)
    INPUT      reduce using rule 138 ($@62)
    LBP        reduce using rule 126 ($@56)
    INT        reduce using rule 124 ($@55)
    VOID       reduce using rule 124 ($@55)
    SEMICOLON  reduce using rule 134 ($@60)
    IF         reduce using rule 122 ($@54)
    WHILE      reduce using rule 120 ($@53)
    DO         reduce using rule 118 ($@52)
    FOR        reduce using rule 116 ($@51)
    CONTINUE   reduce using rule 130 ($@58)
    BREAK      reduce using rule 128 ($@57)
    RETURN     reduce using rule 132 ($@59)
    STRUCT     reduce using rule 124 ($@55)
    $default   reduce using rule 114 ($@50)

    statement  go to state 214
    $@50       go to state 5
    $@51       go to state 6
    $@52       go to state 7
    $@53       go to state 8
    $@54       go to state 9
    $@55       go to state 10
    $@56       go to state 11
    $@57       go to state 12
    $@58       go to state 13
    $@59       go to state 14
    $@60       go to state 15
    $@61       go to state 16
    $@62       go to state 17


State 184

  182 $@83: . %empty
  183 condition_expression: $@81 IF LP expression RP statement $@82 condition_tail . $@83

    $default  reduce using rule 182 ($@83)

    $@83  go to state 215


State 185

  144 $@65: . %empty
  145 statement_block: . $@65 LBP statement_body RBP
  151 function_declaration: $@67 LP function_argument_list RP $@68 . statement_block

    $default  reduce using rule 144 ($@65)

    statement_block  go to state 216
    $@65             go to state 32


State 186

  175 function_argument_list: $@79 function_argument function_argument_tail .

    $default  reduce using rule 175 (function_argument_list)


State 187

  178 function_argument_tail: $@80 . COMMA function_argument_list

    COMMA  shift, and go to state 217


State 188

  112 $@49: . %empty
  113 decorated_identifier: . $@49 address_decorator high_level_pointer_decorator IDENTIFIER high_level_array_decorator
  173 function_argument: $@78 type_defination . decorated_identifier

    $default  reduce using rule 112 ($@49)

    decorated_identifier  go to state 218
    $@49                  go to state 90


State 189

  162 $@74: . %empty
  163 declaration_list: . $@74 declaration_unit declaration_list_tail
  165 declaration_list_tail: $@75 COMMA . declaration_list

    $default  reduce using rule 162 ($@74)

    declaration_list  go to state 219
    $@74              go to state 113


State 190

  168 declaration_unit: $@76 decorated_identifier declaration_init .

    $default  reduce using rule 168 (declaration_unit)


State 191

  170 declaration_init: $@77 . ASSIGN expression

    ASSIGN  shift, and go to state 220


State 192

  113 decorated_identifier: $@49 address_decorator high_level_pointer_decorator IDENTIFIER high_level_array_decorator .

    $default  reduce using rule 113 (decorated_identifier)


State 193

  101 $@45: . %empty
  102 array_decorator: . $@45 LSB expression RSB
  104 high_level_array_decorator: $@46 . array_decorator high_level_array_decorator

    $default  reduce using rule 101 ($@45)

    array_decorator  go to state 221
    $@45             go to state 222


State 194

  107 high_level_pointer_decorator: $@47 TIMES high_level_pointer_decorator .

    $default  reduce using rule 107 (high_level_pointer_decorator)


State 195

   19 ene_expression: $@8 EQ lgh_expression ene_expression .

    $default  reduce using rule 19 (ene_expression)


State 196

   21 ene_expression: $@9 NE lgh_expression ene_expression .

    $default  reduce using rule 21 (ene_expression)


State 197

   25 $@11: . %empty  [GT]
   26 lg_expression: . $@11 GT pmh_expression lg_expression
   26              | $@11 GT pmh_expression . lg_expression
   27 $@12: . %empty  [GE]
   28 lg_expression: . $@12 GE pmh_expression lg_expression
   29 $@13: . %empty  [LT]
   30 lg_expression: . $@13 LT pmh_expression lg_expression
   31 $@14: . %empty  [LE]
   32 lg_expression: . $@14 LE pmh_expression lg_expression
   33              | . %empty  [RP, RSB, EQ, NE, AND, OR, ASSIGN, COMMA, SEMICOLON]

    GT        reduce using rule 25 ($@11)
    LT        reduce using rule 29 ($@13)
    GE        reduce using rule 27 ($@12)
    LE        reduce using rule 31 ($@14)
    $default  reduce using rule 33 (lg_expression)

    lg_expression  go to state 223
    $@11           go to state 146
    $@12           go to state 147
    $@13           go to state 148
    $@14           go to state 149


State 198

   25 $@11: . %empty  [GT]
   26 lg_expression: . $@11 GT pmh_expression lg_expression
   27 $@12: . %empty  [GE]
   28 lg_expression: . $@12 GE pmh_expression lg_expression
   28              | $@12 GE pmh_expression . lg_expression
   29 $@13: . %empty  [LT]
   30 lg_expression: . $@13 LT pmh_expression lg_expression
   31 $@14: . %empty  [LE]
   32 lg_expression: . $@14 LE pmh_expression lg_expression
   33              | . %empty  [RP, RSB, EQ, NE, AND, OR, ASSIGN, COMMA, SEMICOLON]

    GT        reduce using rule 25 ($@11)
    LT        reduce using rule 29 ($@13)
    GE        reduce using rule 27 ($@12)
    LE        reduce using rule 31 ($@14)
    $default  reduce using rule 33 (lg_expression)

    lg_expression  go to state 224
    $@11           go to state 146
    $@12           go to state 147
    $@13           go to state 148
    $@14           go to state 149


State 199

   25 $@11: . %empty  [GT]
   26 lg_expression: . $@11 GT pmh_expression lg_expression
   27 $@12: . %empty  [GE]
   28 lg_expression: . $@12 GE pmh_expression lg_expression
   29 $@13: . %empty  [LT]
   30 lg_expression: . $@13 LT pmh_expression lg_expression
   30              | $@13 LT pmh_expression . lg_expression
   31 $@14: . %empty  [LE]
   32 lg_expression: . $@14 LE pmh_expression lg_expression
   33              | . %empty  [RP, RSB, EQ, NE, AND, OR, ASSIGN, COMMA, SEMICOLON]

    GT        reduce using rule 25 ($@11)
    LT        reduce using rule 29 ($@13)
    GE        reduce using rule 27 ($@12)
    LE        reduce using rule 31 ($@14)
    $default  reduce using rule 33 (lg_expression)

    lg_expression  go to state 225
    $@11           go to state 146
    $@12           go to state 147
    $@13           go to state 148
    $@14           go to state 149


State 200

   25 $@11: . %empty  [GT]
   26 lg_expression: . $@11 GT pmh_expression lg_expression
   27 $@12: . %empty  [GE]
   28 lg_expression: . $@12 GE pmh_expression lg_expression
   29 $@13: . %empty  [LT]
   30 lg_expression: . $@13 LT pmh_expression lg_expression
   31 $@14: . %empty  [LE]
   32 lg_expression: . $@14 LE pmh_expression lg_expression
   32              | $@14 LE pmh_expression . lg_expression
   33              | . %empty  [RP, RSB, EQ, NE, AND, OR, ASSIGN, COMMA, SEMICOLON]

    GT        reduce using rule 25 ($@11)
    LT        reduce using rule 29 ($@13)
    GE        reduce using rule 27 ($@12)
    LE        reduce using rule 31 ($@14)
    $default  reduce using rule 33 (lg_expression)

    lg_expression  go to state 226
    $@11           go to state 146
    $@12           go to state 147
    $@13           go to state 148
    $@14           go to state 149


State 201

   37 pm_expression: $@16 PLUS . mtdh_expression pm_expression
   41 $@18: . %empty
   42 mtdh_expression: . $@18 powh_expression mtd_expression

    $default  reduce using rule 41 ($@18)

    mtdh_expression  go to state 227
    $@18             go to state 151


State 202

   39 pm_expression: $@17 MINUS . mtdh_expression pm_expression
   41 $@18: . %empty
   42 mtdh_expression: . $@18 powh_expression mtd_expression

    $default  reduce using rule 41 ($@18)

    mtdh_expression  go to state 228
    $@18             go to state 151


State 203

   42 mtdh_expression: $@18 powh_expression mtd_expression .

    $default  reduce using rule 42 (mtdh_expression)


State 204

   44 mtd_expression: $@19 . MOD powh_expression mtd_expression

    MOD  shift, and go to state 229


State 205

   46 mtd_expression: $@20 . TIMES powh_expression mtd_expression

    TIMES  shift, and go to state 230


State 206

   48 mtd_expression: $@21 . DIVIDE powh_expression mtd_expression

    DIVIDE  shift, and go to state 231


State 207

   51 powh_expression: $@22 noth_expression . pow_expression
   52 $@23: . %empty  [POW]
   53 pow_expression: . $@23 POW noth_expression pow_expression
   54               | . %empty  [RP, RSB, TIMES, DIVIDE, MOD, PLUS, MINUS, GT, LT, GE, LE, EQ, NE, AND, OR, ASSIGN, COMMA, SEMICOLON]

    POW       reduce using rule 52 ($@23)
    $default  reduce using rule 54 (pow_expression)

    pow_expression  go to state 232
    $@23            go to state 233


State 208

   56 noth_expression: $@24 . pid_expression not_expression
   60 $@26: . %empty  [LP]
   61 pid_expression: . $@26 LP expression RP
   62 $@27: . %empty  [IDENTIFIER]
   63 pid_expression: . $@27 IDENTIFIER pointer_expression
   64 $@28: . %empty  [CONSTANT]
   65 pid_expression: . $@28 CONSTANT

    CONSTANT    reduce using rule 64 ($@28)
    IDENTIFIER  reduce using rule 62 ($@27)
    $default    reduce using rule 60 ($@26)

    pid_expression  go to state 234
    $@26            go to state 235
    $@27            go to state 236
    $@28            go to state 237


State 209

  100 for_expression: $@43 FOR $@44 LP for_init_expression SEMICOLON for_condition_expression SEMICOLON for_action_expression . RP statement_block

    RP  shift, and go to state 238


State 210

    1 $@1: . %empty
    2 expression: . $@1 orh_expression assign_expression
   93 for_action_expression: $@41 . expression for_more_action_expression

    $default  reduce using rule 1 ($@1)

    expression  go to state 239
    $@1         go to state 20


State 211

   87 for_condition_expression: $@39 expression for_more_condition_expression .

    $default  reduce using rule 87 (for_condition_expression)


State 212

   89 $@40: . %empty  [COMMA]
   90 for_more_condition_expression: . $@40 COMMA expression for_more_condition_expression
   90                              | $@40 COMMA expression . for_more_condition_expression
   91                              | . %empty  [SEMICOLON]

    SEMICOLON  reduce using rule 91 (for_more_condition_expression)
    $default   reduce using rule 89 ($@40)

    for_more_condition_expression  go to state 240
    $@40                           go to state 155


State 213

   77 do_expression: $@33 DO $@34 statement_block WHILE LP expression RP SEMICOLON .

    $default  reduce using rule 77 (do_expression)


State 214

  184 condition_tail: ELSE statement .

    $default  reduce using rule 184 (condition_tail)


State 215

  183 condition_expression: $@81 IF LP expression RP statement $@82 condition_tail $@83 .

    $default  reduce using rule 183 (condition_expression)


State 216

  151 function_declaration: $@67 LP function_argument_list RP $@68 statement_block .

    $default  reduce using rule 151 (function_declaration)


State 217

  174 $@79: . %empty  [INT, VOID, STRUCT]
  175 function_argument_list: . $@79 function_argument function_argument_tail
  176                       | . %empty  [RP]
  178 function_argument_tail: $@80 COMMA . function_argument_list

    RP        reduce using rule 176 (function_argument_list)
    $default  reduce using rule 174 ($@79)

    function_argument_list  go to state 241
    $@79                    go to state 134


State 218

  173 function_argument: $@78 type_defination decorated_identifier .

    $default  reduce using rule 173 (function_argument)


State 219

  165 declaration_list_tail: $@75 COMMA declaration_list .

    $default  reduce using rule 165 (declaration_list_tail)


State 220

    1 $@1: . %empty
    2 expression: . $@1 orh_expression assign_expression
  170 declaration_init: $@77 ASSIGN . expression

    $default  reduce using rule 1 ($@1)

    expression  go to state 242
    $@1         go to state 20


State 221

  103 $@46: . %empty  [LSB]
  104 high_level_array_decorator: . $@46 array_decorator high_level_array_decorator
  104                           | $@46 array_decorator . high_level_array_decorator
  105                           | . %empty  [IDENTIFIER, LP, RP, ADDRESS, TIMES, ASSIGN, COMMA, SEMICOLON]

    LSB       reduce using rule 103 ($@46)
    $default  reduce using rule 105 (high_level_array_decorator)

    high_level_array_decorator  go to state 243
    $@46                        go to state 193


State 222

  102 array_decorator: $@45 . LSB expression RSB

    LSB  shift, and go to state 244


State 223

   26 lg_expression: $@11 GT pmh_expression lg_expression .

    $default  reduce using rule 26 (lg_expression)


State 224

   28 lg_expression: $@12 GE pmh_expression lg_expression .

    $default  reduce using rule 28 (lg_expression)


State 225

   30 lg_expression: $@13 LT pmh_expression lg_expression .

    $default  reduce using rule 30 (lg_expression)


State 226

   32 lg_expression: $@14 LE pmh_expression lg_expression .

    $default  reduce using rule 32 (lg_expression)


State 227

   36 $@16: . %empty  [PLUS]
   37 pm_expression: . $@16 PLUS mtdh_expression pm_expression
   37              | $@16 PLUS mtdh_expression . pm_expression
   38 $@17: . %empty  [MINUS]
   39 pm_expression: . $@17 MINUS mtdh_expression pm_expression
   40              | . %empty  [RP, RSB, GT, LT, GE, LE, EQ, NE, AND, OR, ASSIGN, COMMA, SEMICOLON]

    PLUS      reduce using rule 36 ($@16)
    MINUS     reduce using rule 38 ($@17)
    $default  reduce using rule 40 (pm_expression)

    pm_expression  go to state 245
    $@16           go to state 175
    $@17           go to state 176


State 228

   36 $@16: . %empty  [PLUS]
   37 pm_expression: . $@16 PLUS mtdh_expression pm_expression
   38 $@17: . %empty  [MINUS]
   39 pm_expression: . $@17 MINUS mtdh_expression pm_expression
   39              | $@17 MINUS mtdh_expression . pm_expression
   40              | . %empty  [RP, RSB, GT, LT, GE, LE, EQ, NE, AND, OR, ASSIGN, COMMA, SEMICOLON]

    PLUS      reduce using rule 36 ($@16)
    MINUS     reduce using rule 38 ($@17)
    $default  reduce using rule 40 (pm_expression)

    pm_expression  go to state 246
    $@16           go to state 175
    $@17           go to state 176


State 229

   44 mtd_expression: $@19 MOD . powh_expression mtd_expression
   50 $@22: . %empty
   51 powh_expression: . $@22 noth_expression pow_expression

    $default  reduce using rule 50 ($@22)

    powh_expression  go to state 247
    $@22             go to state 178


State 230

   46 mtd_expression: $@20 TIMES . powh_expression mtd_expression
   50 $@22: . %empty
   51 powh_expression: . $@22 noth_expression pow_expression

    $default  reduce using rule 50 ($@22)

    powh_expression  go to state 248
    $@22             go to state 178


State 231

   48 mtd_expression: $@21 DIVIDE . powh_expression mtd_expression
   50 $@22: . %empty
   51 powh_expression: . $@22 noth_expression pow_expression

    $default  reduce using rule 50 ($@22)

    powh_expression  go to state 249
    $@22             go to state 178


State 232

   51 powh_expression: $@22 noth_expression pow_expression .

    $default  reduce using rule 51 (powh_expression)


State 233

   53 pow_expression: $@23 . POW noth_expression pow_expression

    POW  shift, and go to state 250


State 234

   56 noth_expression: $@24 pid_expression . not_expression
   57 $@25: . %empty  [NOT]
   58 not_expression: . $@25 NOT pid_expression not_expression
   59               | . %empty  [RP, RSB, POW, TIMES, DIVIDE, MOD, PLUS, MINUS, GT, LT, GE, LE, EQ, NE, AND, OR, ASSIGN, COMMA, SEMICOLON]

    NOT       reduce using rule 57 ($@25)
    $default  reduce using rule 59 (not_expression)

    not_expression  go to state 251
    $@25            go to state 252


State 235

   61 pid_expression: $@26 . LP expression RP

    LP  shift, and go to state 253


State 236

   63 pid_expression: $@27 . IDENTIFIER pointer_expression

    IDENTIFIER  shift, and go to state 254


State 237

   65 pid_expression: $@28 . CONSTANT

    CONSTANT  shift, and go to state 255


State 238

  100 for_expression: $@43 FOR $@44 LP for_init_expression SEMICOLON for_condition_expression SEMICOLON for_action_expression RP . statement_block
  144 $@65: . %empty
  145 statement_block: . $@65 LBP statement_body RBP

    $default  reduce using rule 144 ($@65)

    statement_block  go to state 256
    $@65             go to state 32


State 239

   93 for_action_expression: $@41 expression . for_more_action_expression
   95 $@42: . %empty  [COMMA]
   96 for_more_action_expression: . $@42 COMMA expression
   97                           | . %empty  [RP]

    RP        reduce using rule 97 (for_more_action_expression)
    $default  reduce using rule 95 ($@42)

    for_more_action_expression  go to state 257
    $@42                        go to state 258


State 240

   90 for_more_condition_expression: $@40 COMMA expression for_more_condition_expression .

    $default  reduce using rule 90 (for_more_condition_expression)


State 241

  178 function_argument_tail: $@80 COMMA function_argument_list .

    $default  reduce using rule 178 (function_argument_tail)


State 242

  170 declaration_init: $@77 ASSIGN expression .

    $default  reduce using rule 170 (declaration_init)


State 243

  104 high_level_array_decorator: $@46 array_decorator high_level_array_decorator .

    $default  reduce using rule 104 (high_level_array_decorator)


State 244

    1 $@1: . %empty
    2 expression: . $@1 orh_expression assign_expression
  102 array_decorator: $@45 LSB . expression RSB

    $default  reduce using rule 1 ($@1)

    expression  go to state 259
    $@1         go to state 20


State 245

   37 pm_expression: $@16 PLUS mtdh_expression pm_expression .

    $default  reduce using rule 37 (pm_expression)


State 246

   39 pm_expression: $@17 MINUS mtdh_expression pm_expression .

    $default  reduce using rule 39 (pm_expression)


State 247

   43 $@19: . %empty  [MOD]
   44 mtd_expression: . $@19 MOD powh_expression mtd_expression
   44               | $@19 MOD powh_expression . mtd_expression
   45 $@20: . %empty  [TIMES]
   46 mtd_expression: . $@20 TIMES powh_expression mtd_expression
   47 $@21: . %empty  [DIVIDE]
   48 mtd_expression: . $@21 DIVIDE powh_expression mtd_expression
   49               | . %empty  [RP, RSB, PLUS, MINUS, GT, LT, GE, LE, EQ, NE, AND, OR, ASSIGN, COMMA, SEMICOLON]

    TIMES     reduce using rule 45 ($@20)
    DIVIDE    reduce using rule 47 ($@21)
    MOD       reduce using rule 43 ($@19)
    $default  reduce using rule 49 (mtd_expression)

    mtd_expression  go to state 260
    $@19            go to state 204
    $@20            go to state 205
    $@21            go to state 206


State 248

   43 $@19: . %empty  [MOD]
   44 mtd_expression: . $@19 MOD powh_expression mtd_expression
   45 $@20: . %empty  [TIMES]
   46 mtd_expression: . $@20 TIMES powh_expression mtd_expression
   46               | $@20 TIMES powh_expression . mtd_expression
   47 $@21: . %empty  [DIVIDE]
   48 mtd_expression: . $@21 DIVIDE powh_expression mtd_expression
   49               | . %empty  [RP, RSB, PLUS, MINUS, GT, LT, GE, LE, EQ, NE, AND, OR, ASSIGN, COMMA, SEMICOLON]

    TIMES     reduce using rule 45 ($@20)
    DIVIDE    reduce using rule 47 ($@21)
    MOD       reduce using rule 43 ($@19)
    $default  reduce using rule 49 (mtd_expression)

    mtd_expression  go to state 261
    $@19            go to state 204
    $@20            go to state 205
    $@21            go to state 206


State 249

   43 $@19: . %empty  [MOD]
   44 mtd_expression: . $@19 MOD powh_expression mtd_expression
   45 $@20: . %empty  [TIMES]
   46 mtd_expression: . $@20 TIMES powh_expression mtd_expression
   47 $@21: . %empty  [DIVIDE]
   48 mtd_expression: . $@21 DIVIDE powh_expression mtd_expression
   48               | $@21 DIVIDE powh_expression . mtd_expression
   49               | . %empty  [RP, RSB, PLUS, MINUS, GT, LT, GE, LE, EQ, NE, AND, OR, ASSIGN, COMMA, SEMICOLON]

    TIMES     reduce using rule 45 ($@20)
    DIVIDE    reduce using rule 47 ($@21)
    MOD       reduce using rule 43 ($@19)
    $default  reduce using rule 49 (mtd_expression)

    mtd_expression  go to state 262
    $@19            go to state 204
    $@20            go to state 205
    $@21            go to state 206


State 250

   53 pow_expression: $@23 POW . noth_expression pow_expression
   55 $@24: . %empty
   56 noth_expression: . $@24 pid_expression not_expression

    $default  reduce using rule 55 ($@24)

    noth_expression  go to state 263
    $@24             go to state 208


State 251

   56 noth_expression: $@24 pid_expression not_expression .

    $default  reduce using rule 56 (noth_expression)


State 252

   58 not_expression: $@25 . NOT pid_expression not_expression

    NOT  shift, and go to state 264


State 253

    1 $@1: . %empty
    2 expression: . $@1 orh_expression assign_expression
   61 pid_expression: $@26 LP . expression RP

    $default  reduce using rule 1 ($@1)

    expression  go to state 265
    $@1         go to state 20


State 254

   63 pid_expression: $@27 IDENTIFIER . pointer_expression
   66 $@29: . %empty  [POINTER]
   67 pointer_expression: . $@29 POINTER IDENTIFIER pointer_expression
   68                   | . %empty  [RP, RSB, NOT, POW, TIMES, DIVIDE, MOD, PLUS, MINUS, GT, LT, GE, LE, EQ, NE, AND, OR, ASSIGN, COMMA, SEMICOLON]

    POINTER   reduce using rule 66 ($@29)
    $default  reduce using rule 68 (pointer_expression)

    pointer_expression  go to state 266
    $@29                go to state 267


State 255

   65 pid_expression: $@28 CONSTANT .

    $default  reduce using rule 65 (pid_expression)


State 256

  100 for_expression: $@43 FOR $@44 LP for_init_expression SEMICOLON for_condition_expression SEMICOLON for_action_expression RP statement_block .

    $default  reduce using rule 100 (for_expression)


State 257

   93 for_action_expression: $@41 expression for_more_action_expression .

    $default  reduce using rule 93 (for_action_expression)


State 258

   96 for_more_action_expression: $@42 . COMMA expression

    COMMA  shift, and go to state 268


State 259

  102 array_decorator: $@45 LSB expression . RSB

    RSB  shift, and go to state 269


State 260

   44 mtd_expression: $@19 MOD powh_expression mtd_expression .

    $default  reduce using rule 44 (mtd_expression)


State 261

   46 mtd_expression: $@20 TIMES powh_expression mtd_expression .

    $default  reduce using rule 46 (mtd_expression)


State 262

   48 mtd_expression: $@21 DIVIDE powh_expression mtd_expression .

    $default  reduce using rule 48 (mtd_expression)


State 263

   52 $@23: . %empty  [POW]
   53 pow_expression: . $@23 POW noth_expression pow_expression
   53               | $@23 POW noth_expression . pow_expression
   54               | . %empty  [RP, RSB, TIMES, DIVIDE, MOD, PLUS, MINUS, GT, LT, GE, LE, EQ, NE, AND, OR, ASSIGN, COMMA, SEMICOLON]

    POW       reduce using rule 52 ($@23)
    $default  reduce using rule 54 (pow_expression)

    pow_expression  go to state 270
    $@23            go to state 233


State 264

   58 not_expression: $@25 NOT . pid_expression not_expression
   60 $@26: . %empty  [LP]
   61 pid_expression: . $@26 LP expression RP
   62 $@27: . %empty  [IDENTIFIER]
   63 pid_expression: . $@27 IDENTIFIER pointer_expression
   64 $@28: . %empty  [CONSTANT]
   65 pid_expression: . $@28 CONSTANT

    CONSTANT    reduce using rule 64 ($@28)
    IDENTIFIER  reduce using rule 62 ($@27)
    $default    reduce using rule 60 ($@26)

    pid_expression  go to state 271
    $@26            go to state 235
    $@27            go to state 236
    $@28            go to state 237


State 265

   61 pid_expression: $@26 LP expression . RP

    RP  shift, and go to state 272


State 266

   63 pid_expression: $@27 IDENTIFIER pointer_expression .

    $default  reduce using rule 63 (pid_expression)


State 267

   67 pointer_expression: $@29 . POINTER IDENTIFIER pointer_expression

    POINTER  shift, and go to state 273


State 268

    1 $@1: . %empty
    2 expression: . $@1 orh_expression assign_expression
   96 for_more_action_expression: $@42 COMMA . expression

    $default  reduce using rule 1 ($@1)

    expression  go to state 274
    $@1         go to state 20


State 269

  102 array_decorator: $@45 LSB expression RSB .

    $default  reduce using rule 102 (array_decorator)


State 270

   53 pow_expression: $@23 POW noth_expression pow_expression .

    $default  reduce using rule 53 (pow_expression)


State 271

   57 $@25: . %empty  [NOT]
   58 not_expression: . $@25 NOT pid_expression not_expression
   58               | $@25 NOT pid_expression . not_expression
   59               | . %empty  [RP, RSB, POW, TIMES, DIVIDE, MOD, PLUS, MINUS, GT, LT, GE, LE, EQ, NE, AND, OR, ASSIGN, COMMA, SEMICOLON]

    NOT       reduce using rule 57 ($@25)
    $default  reduce using rule 59 (not_expression)

    not_expression  go to state 275
    $@25            go to state 252


State 272

   61 pid_expression: $@26 LP expression RP .

    $default  reduce using rule 61 (pid_expression)


State 273

   67 pointer_expression: $@29 POINTER . IDENTIFIER pointer_expression

    IDENTIFIER  shift, and go to state 276


State 274

   96 for_more_action_expression: $@42 COMMA expression .

    $default  reduce using rule 96 (for_more_action_expression)


State 275

   58 not_expression: $@25 NOT pid_expression not_expression .

    $default  reduce using rule 58 (not_expression)


State 276

   66 $@29: . %empty  [POINTER]
   67 pointer_expression: . $@29 POINTER IDENTIFIER pointer_expression
   67                   | $@29 POINTER IDENTIFIER . pointer_expression
   68                   | . %empty  [RP, RSB, NOT, POW, TIMES, DIVIDE, MOD, PLUS, MINUS, GT, LT, GE, LE, EQ, NE, AND, OR, ASSIGN, COMMA, SEMICOLON]

    POINTER   reduce using rule 66 ($@29)
    $default  reduce using rule 68 (pointer_expression)

    pointer_expression  go to state 277
    $@29                go to state 267


State 277

   67 pointer_expression: $@29 POINTER IDENTIFIER pointer_expression .

    $default  reduce using rule 67 (pointer_expression)
